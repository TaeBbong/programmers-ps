# 야근 지수
(programmers LV3)

a + b + c = 10
min(a^2 + b^2 + c^2) a, b, c???

3, 3, 4 => 9 + 9 + 16

1, 2, 7 => 1 + 4 + 49


a^2 + b^2 + c^2 = (a + b + c)^2 - 2ab - 2bc -2ca

ab + bc + ca를 최대로 만들어야 함

=> a, b, c의 차이가 최소가 되어야 함
제곱의 특성 / 분산 공식으로 증명 가능!

따라서 N을 적절히 분배하여 a, b, c를 최대한 비슷하게 만들어야 하는데
내 접근법은 a, b, c의 비율에 따라 N을 차등배분(비례하여 분배)
이때 제일 큰 값을 나중에 분배해주어 나머지를 최대한 먹을 수 있도록 분배
이러면 O(n)만에 해결할 수 있음(정렬 제외)

근데 분배 후 보정에서 문제 발생....
버림을 전제로 하기 때문에 완벽한 균형을 맞추기가 너무 어려움..

def solution(n, works):
    answer = 0
    works = sorted(works)
    total = sum(works)
    rests = []
    process = 0
    
    
    for work in works[:-1]:
        job = n * work // total
        rests.append(max(0, work - job))
        if rests[-1] == 0:
            process += work
        else:
            process += job
    
    rests.append(max(0, works[-1] - (n - process)))
    
    answer = sum([i * i for i in rests])
    
    print(rests)
    
    return answer
예를 들어 10, 10, 1 / 10일 때 전체 합은 21, 보정 값은 4, 4, 0
이때 0, 4를 한 후 나머지 2까지 합해서 6을 보정하면 실패(1, 5, 5)
그러면 일단은 버림 기준으로 싹 보정한 후에,
나머지를 최대부터 다시 균등 배분하면?

def solution(n, works):
    answer = 0
    works = sorted(works)
    total = sum(works)
    rests = []
    process = 0
    
    if total <= n:
        return 0
    
    
    for work in works:
        job = n * work // total
        rests.append(max(0, work - job))
        if rests[-1] == 0:
            process += work
        else:
            process += job
            
    extra = n - process
    while True:
        rests = sorted(rests, reverse=True)
        for i in range(extra):
            if rests[i] >= 1:
                rests[i] -= 1
                extra -= 1
        if extra == 0:
            break
    
    answer = sum([i * i for i in rests])
    
    return answer

그래도 실패... 

일단은 그냥 O(N^2)풀이로...
반복해서 최대값을 찾고, 최대값을 -1하는 방식으로 구현