# 수식 최대화

문제 정보 : lv2, stack, 구현

+, -, * 연산자 우선순위를 내 마음대로 지정할 수 있을 때 수식의 최댓값 구하기

1. 가능한 연산자 우선순위들을 permutations로 뽑아내고
2. stack 기반으로 연산을 3번 수행(제일 높은 우선순위걸로 한번, 그 다음으로 한번, 마지막으로 한번)

연산은 치트키 eval을 사용했고,
스택만 적절히 사용하면 간단히 구현할 수 있음

```python
def calculate_expression_by_order(expression, order):
    stack = []
    expression_wip = expression.copy()
    for operator in order:
        for exp in expression_wip:
            if stack:
                if stack[-1] == operator:
                    op = stack.pop()
                    an = stack.pop()
                    result = str(eval(''.join([an, op, exp])))
                    stack.append(result)
                    continue
            stack.append(exp)
        expression_wip = stack.copy()
        stack = []
    return int(expression_wip[0])


def make_orders(operators):
    orders = []
    from itertools import permutations
    candidates = list(permutations(operators))
    for cand in candidates:
        tmp_dict = {}
        for i, c in enumerate(cand):
            tmp_dict[c] = i
        orders.append(tmp_dict)
    return orders


def solution(expression_str):
    expression = [expression_str]
    MAX = -1
    operators = ['-', '+', '*']
    for oper in operators:
        expression = [ex.replace(oper, f' {oper} ') for ex in expression]
        tmp = []
        for ex in expression:
            tmp += ex.split(' ')
        expression = tmp.copy()
    orders = make_orders(operators)
    
    for order in orders:
        result = abs(calculate_expression_by_order(expression, order))
        if result > MAX:
            MAX = result
    return MAX
```