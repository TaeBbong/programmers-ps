# 행렬 테두리 회전

문제 정보 : lv2, 구현

행렬이 주어짐, 이후 회전시키고자 하는 (sy, sx), (ey, ex)가 주어질 때, 해당 범위의 테두리만을 회전시킴(시계방향)
이를 여러차례 반복하므로, 실제로 maps의 데이터들을 회전시켜야 함

문제는 1) 쿼리로부터 테두리를 구하기 2) 해당 테두리의 값들을 shift하기 3) shift된 값들 중 최솟값 저장하기
이렇게 3단계로 구성
여기서 2단계와 3단계는 합쳐서 구현 가능

```python
def get_border(query):
    sy, sx, ey, ex = [q - 1 for q in query]
    border = []
    for x in range(sx, ex + 1):
        border.append((sy, x))
    for y in range(sy + 1, ey + 1):
        border.append((y, ex))
    for x in range(ex - 1, sx - 1, -1):
        border.append((ey, x))
    for y in range(ey - 1, sy, -1):
        border.append((y, sx))
    return border


def rotate_border_with_min(border, maps):
    i = 1
    backup = maps[border[0][0]][border[0][1]]
    min_value = backup
    while i < len(border):
        y, x = border[i]
        temp = maps[y][x]
        maps[y][x] = backup
        backup = temp
        if backup < min_value:
            min_value = backup
        i += 1
    maps[border[0][0]][border[0][1]] = backup
    return (min_value, maps)

def solution(rows, columns, queries):
    answer = []
    maps = [[i * columns + j + 1 for j in range(columns)] for i in range(rows)]

    for query in queries:
        border = get_border(query)
        min_value, maps = rotate_border_with_min(border, maps)
        answer.append(min_value)
    return answer
```

확실히 요즘 이런 문제 나오면 목표를 쪼개서 가니까 훨씬 쉬워짐