# 순위 검색

문제 정보 : lv2, 시간복잡도

아주 단순한 문제이지만 시간복잡도/효율성을 극한으로 올리기 위한 아주 많은 노력이 들어가는 문제
가능한 쿼리의 경우의 수가 4*3*3*3 = 108 이므로 108개의 케이스를 미리 다 연산해놓는 전략
따라서 K개의 쿼리가 들어올 때(K=100000)
해당 쿼리에 해당하는 케이스를 뽑는 비용 : O(1)
해당 케이스에서 특정 점수 이상인 개수를 세는 비용 : O(log N)

결국 
사전 세팅 = O(N log N) + 3*2*2*2 * O(N)
쿼리 처리 = K * O(log N)

이들의 합이므로 문제 없이 시간복잡도를 통과

```python
import bisect


def score_query(scores, threshold):
    idx = bisect.bisect_left(scores, threshold)
    return len(scores) - idx


def generate_possible_queries(lang, posi, care, food):
    results = []
    for l in [lang, '-']:
        for p in [posi, '-']:
            for c in [care, '-']:
                for f in [food, '-']:
                    results.append(' '.join([l, p, c, f]))
    return results


def solution(infoes, queries):
    infoes = sorted(infoes, key=lambda x: int(x.split(' ')[-1]))
    answer = []
    possible_queries = []
    for l in ['cpp', 'java', 'python', '-']:
        for p in ['backend', 'frontend', '-']:
            for c in ['junior', 'senior', '-']:
                for f in ['chicken', 'pizza', '-']:
                    possible_queries.append(' '.join([l, p, c, f]))

    people_cases = {}
    for query in possible_queries:
        people_cases[query] = []

    for info in infoes:
        l, p, c, f, s = info.split(' ')
        person_queries = generate_possible_queries(l, p, c, f)
        for query in person_queries:
            people_cases[query].append(int(s))
    
    for query in queries:
        l, _, p, _, c, _, f, s = query.split(' ')
        q = ' '.join([l, p, c, f])
        results = people_cases[q]
        answer.append(score_query(results, int(s)))

    return answer
```