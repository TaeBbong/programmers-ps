# 최고의 집합

문제 정보 : 프로그래머스 lv3, 수학..?

문제 설명
자연수 n 개로 이루어진 중복 집합(multi set, 편의상 이후에는 "집합"으로 통칭) 중에 다음 두 조건을 만족하는 집합을 최고의 집합이라고 합니다.

각 원소의 합이 S가 되는 수의 집합
위 조건을 만족하면서 각 원소의 곱 이 최대가 되는 집합
예를 들어서 자연수 2개로 이루어진 집합 중 합이 9가 되는 집합은 다음과 같이 4개가 있습니다.
{ 1, 8 }, { 2, 7 }, { 3, 6 }, { 4, 5 }
그중 각 원소의 곱이 최대인 { 4, 5 }가 최고의 집합입니다.

집합의 원소의 개수 n과 모든 원소들의 합 s가 매개변수로 주어질 때, 최고의 집합을 return 하는 solution 함수를 완성해주세요.

제한사항
최고의 집합은 오름차순으로 정렬된 1차원 배열(list, vector) 로 return 해주세요.
만약 최고의 집합이 존재하지 않는 경우에 크기가 1인 1차원 배열(list, vector) 에 -1 을 채워서 return 해주세요.
자연수의 개수 n은 1 이상 10,000 이하의 자연수입니다.
모든 원소들의 합 s는 1 이상, 100,000,000 이하의 자연수입니다.

=============

처음에는 중복집합 조건을 생각하지 않고 s를 만들 수 있는 n의 조합을 어떻게 꾸릴 수 있을까 고민했음.
근데 생각해보니 중복이 허용되고, 이전에 비슷한 문제에서 증명했듯 곱이 최대가 되려면 그 차이가 적은 친구들로 구성해야 함.
따라서 걍 S를 n으로 나누고 그 몫을 각 원소로 설정, 나머지가 발생하면 그 수만큼 원소들에게 1씩 분배.
이러니 너무 쉽게 풀린...

=============

def solution(n, s):
    answer = []
    if s // n == 0:
        return [-1]
    
    answer = [s // n for i in range(n)]
    if s % n == 0:
        return answer
    else:
        for i in range(s % n):
            answer[i] += 1
    
    return answer[::-1]