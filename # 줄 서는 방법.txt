# 줄 서는 방법

문제 정보 : lv2, 구현

[1, 2, 3]
[1, 3, 2]
[2, 1, 3]
[2, 3, 1]
[3, 1, 2]
[3, 2, 1]

n=3일 때 이런거에서 k 주어졌을 때 사전순서상 k번째를 리턴하는 문제
오잉 이거 완전 itertools.permutations 쓰면 끝나는거 아니냐? 싶어서 바로 짰는데,
n 제한이 20 => 20!
이게 얼마지?
10^18이라고 함...

from itertools import permutations


def solution(n, k):
    candidates = list(permutations([i + 1 for i in range(n)], n))
    return sorted(candidates)[k - 1]

그럼 이제 뭘 해야하냐.. 결국 manual한 계산을 통해 k번째만을 독립적으로 구해야 함.

결국 저 순서들은 n! 에 의해 정렬될거란 말이지..

n = 3, k = 5
1) 2! 기준으로 자름
=> 3x2! 구간으로 확인됨 => 첫 자리는 3
2) 1! 기준으로 자름
1x1!, 2x1! => 1x1!로 확인 => 두번째 자리는 1
3) 0! 기준으로 => 마지막 자리는 나머지 고정이므로 2

1 [1, 2, 3]
2 [1, 3, 2]
------------- 1x2!
3 [2, 1, 3]
4 [2, 3, 1]
------------- 2x2!
5 [3, 1, 2]
6 [3, 2, 1]
------------- 3x2! = 3!

n = 4로 해보면, k = 15 = (a - 1) * 3! + (b - 1) * 2! + (c - 1) * 1! + (d - 1) * 0!
[1, 2, 3, 4]
여기서 나오는 a, b, c, d번째 값을 pop하면 되겠다
3 2 
1) 3!으로 구간 짜름
[1, 2, 3, 4]
[1, 2, 4, 3]
[1, 3, 2, 4]
[1, 3, 4, 2]
[1, 4, 2, 3]
[1, 4, 3, 2]
------------- 1x3!(6)
[2, 1, 3, 4]
...
------------- 2x3!(12)
[3, 1, 2, 4]
...
------------- 3x3!(18)



오호, 그렇다면 어떤 수 k가 주어졌을 때,
1 ~ 1x(n - 1)! / 1x(n - 1)! + 1 ~ 2x(n - 1)! / ... 
중에서 어떤 범위에 있는지를 알면 => 맨 앞자리를 확정할 수 있음

결국 k를 (n - 1)! ~ 1!까지 나눠가면서, 그 몫 번째의 값을 pop해서 answer에 집어넣고,
나머지를 다시 k로 설정하여 반복을 이어나감

```python
def factorial(n):
    r = 1
    for i in range(1, n + 1):
        r *= i
    return r


def solution(n, k):
    answer = []
    numbers = [(i + 1) for i in range(n)]
    k -= 1
    
    for i in range(n - 1, 0, -1): # (n - 1)! ~ 2!
        idc = factorial(i)
        idx = k // idc
        k %= idc
        answer.append(numbers.pop(idx))
    answer.append(numbers[0])
    
    return answer
```

다른 사람들 풀이 보니 이게 제일 똑똑한 방법이었던듯