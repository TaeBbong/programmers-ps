# 괄호 변환

문제 정보 : lv2, 구현

다음 알고리즘을 `그대로` 구현하면 되는 문제

1. 입력이 빈 문자열인 경우, 빈 문자열을 반환합니다. 
2. 문자열 w를 두 "균형잡힌 괄호 문자열" u, v로 분리합니다. 단, u는 "균형잡힌 괄호 문자열"로 더 이상 분리할 수 없어야 하며, v는 빈 문자열이 될 수 있습니다. 
3. 문자열 u가 "올바른 괄호 문자열" 이라면 문자열 v에 대해 1단계부터 다시 수행합니다. 
  3-1. 수행한 결과 문자열을 u에 이어 붙인 후 반환합니다. 
4. 문자열 u가 "올바른 괄호 문자열"이 아니라면 아래 과정을 수행합니다. 
  4-1. 빈 문자열에 첫 번째 문자로 '('를 붙입니다. 
  4-2. 문자열 v에 대해 1단계부터 재귀적으로 수행한 결과 문자열을 이어 붙입니다. 
  4-3. ')'를 다시 붙입니다. 
  4-4. u의 첫 번째와 마지막 문자를 제거하고, 나머지 문자열의 괄호 방향을 뒤집어서 뒤에 붙입니다. 
  4-5. 생성된 문자열을 반환합니다.

전체 풀이 함수를 재귀함수로 작성하면서, 일단 로직을 전부 짜놓고, 필요한 함수를 따로 구현하니 아주 간단히 끝났음
마지막에 괄호 방향 뒤집는다는걸 문자열을 뒤집는다로 봐서 잠깐 헤맸음..

```python
def is_correct(w):
    count = 0
    for s in w:
        if s == '(':
            count += 1
        else:
            count -= 1
        if count < 0:
            return False
    if count == 0:
        return True
    return False


def reverse_brackets(w):
    r = ''
    for s in w:
        if s == '(':
            r += ')'
        else:
            r += '('
    return r


def divide_brackets(w):
    count = 0
    for i, s in enumerate(w):
        if s == '(':
            count += 1
        else:
            count -= 1
        if count == 0:
            return (w[:i + 1], w[i + 1:])
    return (w, '')
        

def correct_brackets(w):
    # 1. Checks if `w` is empty
    if len(w) == 0:
        return w
    # 2. Divides `w` into two strings `u`, `v`
    u, v = divide_brackets(w)
    # 3. Returns `u` + `correct_brackets(v)` if `u` is correct
    if is_correct(u):
        return u + correct_brackets(v)
    # 4. Corrects `u`, and get results for `v`
    r = '('
    r += correct_brackets(v)
    r += ')'
    r += reverse_brackets(u[1:-1])
    return r


def solution(p):
    answer = correct_brackets(p)
    return answer
```