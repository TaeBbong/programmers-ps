# 양궁대회

문제 정보 : lv2, 재귀(dfs) / dp

dp를 선택한 순간 backtracking 등 지옥을 맛볼 것...
그냥 재귀로 모든 경우(먹냐 안먹냐) 따지는게 훨씬 쉽다
dp도 나쁘진 않았는데.. 확 어려워짐

dp 버전
```python
def solution(n, info):
    SIZE = 10
    '''
    [1] dp 배열 초기화
    - dp[i][k]: 현재까지 총 k개의 화살을 쏴서 i번째 점수까지 왔을 때 최대 점수차, i 점수에 쏜 화살 수
    - dp[0][k]: 10점에 k발을 쐈을 때의 점수 차 # info[0] 초과하면 10, 이하면 -10, 0이면 0
    '''
    dp = [[(0, 0)] * (n + 1) for _ in range(SIZE + 1)]
    score = [i for i in range(SIZE, -1, -1)]
    dp[0][0] = (-score[0] if info[0] else 0, 0)
    for k in range(1, n + 1):
        dp[0][k] = (-score[0] if k <= info[0] else score[0], k)
    
    '''
    [2] dp 계산
    - 점수 i : 1 ~ 10 / 화살 k : 0 ~ n
    - 1) 화살이 여유 있을 때
        - dp[i][k] = max(dp[i - 1][k - 1][0] + score[i], dp[i - 1][k][0] - score[i]) # 이기거나 / 지거나
    - 2) 화살이 여유 없을 때(무조건 패배)
        - dp[i][k] = dp[i - 1][k] - score[i]
    - 단, info[i] == 0, 즉 어피치가 쏘지 않은 경우에는 0개 쏴도 -score가 아닌 0점을 얻게 됨(이를 삼항연산자로 처리)
    '''
    for i in range(1, SIZE + 1):
        for k in range(0, n + 1):
            if k >= info[i] + 1:
                shoot_win, shoot_lose = info[i] + 1, 0
                earn_win, earn_lose = score[i], -score[i] if info[i] else 0
                dp_win, dp_lose = dp[i - 1][k - shoot_win][0] + earn_win, dp[i - 1][k - shoot_lose][0] + earn_lose
                dp[i][k] = (dp_win, shoot_win) if dp_win >= dp_lose else (dp_lose, shoot_lose)
            else:
                dp[i][k] = (dp[i - 1][k][0] - score[i], 0) if info[i] else (dp[i - 1][k][0], 0)
    

    '''
    [3] 백트랙킹으로 경로 추적
    - 함께 저장한 dp[i][k][1]을 활용, k를 감소시키며 상위로 이동
    - 역순으로 기록되었으므로 reverse
    '''
    k = n
    backtrack = []
    for j in range(SIZE, -1, -1):
        backtrack.append(dp[j][k][1])
        k -= dp[j][k][1]
    backtrack = backtrack[::-1]
    
    '''
    [4] 정답 처리
    - 1. 가장 큰 점수 차 : dp[SIZE][n][0]
    - 2. 가장 큰 점수 차의 양궁 결과 : backtrack
    - 3. 최적의 양궁 결과 == backtrack의 승패를 변화시키지 않는 선에서 오버하게 쓰인 화살(rest)을 낮은 점수 쪽으로 이동(재분배)
    '''
    MAX = dp[SIZE][n][0]
    rest = 0
    for j in range(SIZE + 1):
        if backtrack[j] > info[j]:
            rest += backtrack[j] - info[j] - 1
            backtrack[j] = info[j] + 1
    j = SIZE
    while rest:
        # 낮은 점수부터 채워주기
        
        # (패배) 패배할 수 있는 선에서 가장 높게 채워주기
        if backtrack[j] <= info[j]:
            diff = info[j] - backtrack[j]
            if rest >= diff:
                backtrack[j] += diff
                rest -= diff
            else:
                backtrack[j] += rest
                break
        # (승리) 승리는 무제한으로 채워주기 가능
        else:
            backtrack[j] += rest
            break
        j -= 1
    
    if MAX <= 0:
        return [-1]
    return backtrack
```

재귀 버전
```python
import copy


def dfs(play, i, k, info):
    if i == 11:
        if k:
            play[-1] += k
        return [play]
    results = []
    if k >= info[i] + 1:
        results += dfs(play + [info[i] + 1], i + 1, k - info[i] - 1, info)
        results += dfs(play + [0], i + 1, k, info)
    else:
        results += dfs(play + [0], i + 1, k, info)
    return results


def solution(n, info):
    MAX = -55
    MAX_ANSWER = []
    score = [i for i in range(10, -1, -1)]

    plays = dfs([], 0, n, info)
    for play in plays:
        ans = 0
        for i in range(10, -1, -1):
            if play[i] > info[i]:
                ans += score[i]
            else:
                if info[i]:
                    ans -= score[i]
        if ans > MAX:
            MAX_ANSWER = copy.copy(play)
            MAX = ans
        if ans == MAX:
            if ''.join(reversed([str(i) for i in play])) > ''.join(reversed([str(i) for i in MAX_ANSWER])):
                MAX_ANSWER = copy.copy(play)
    if MAX > 0:
        return MAX_ANSWER
    return [-1]
```