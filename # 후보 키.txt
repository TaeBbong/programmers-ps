# 후보 키

문제 정보 : lv2, 집합

db 테이블 relation에서 만들 수 있는 후보키의 개수 구하기
해당 후보키로 모든 row를 구분할 수 있어야 하며, 후보키는 최소한의 키로 구분이 되어야 한다.
예를 들어 (1, 3) 조합의 키가 후보키라면, (1, 2, 3)은 (1,3)에 2를 더한 것이므로 후보키가 될 수 없음

결국 1) 해당 후보키 조합으로 모든 row가 구분되는지 확인하고, 2) 그 키가 그동안 나왔던 키들에게 겹치지 않는지 확인

1번 조건에서는 해당 키로 row들을 뽑아서 set에 집어넣고 길이를 체크,
2번 조건에서는 기존 키 & 해당 키 교집합 == 기존 키인지 확인

```python
from itertools import combinations


def get_candidates(key_len):
    cands = []
    keys = [i for i in range(key_len)]
    for i in range(1, key_len + 1):
        cands += list(combinations(keys, i))
    return cands


def check_available(cand_key, relation):
    test_set = set([])
    for row in relation:
        tmp_row = []
        for key in cand_key:
            tmp_row.append(row[key])
        test_set.add(tuple(tmp_row))
    if len(test_set) == len(relation):
        return True
    return False


def check_min(cand_key: list, keys: list):
    for key in keys:
        if set(key) & set(cand_key) == set(key):
            return False
    return True


def solution(relation):
    cands = get_candidates(len(relation[0]))
    keys = []
    for cand in cands:
        if check_available(cand, relation):
            if check_min(cand, keys):
                keys.append(cand)
    return len(keys)
```